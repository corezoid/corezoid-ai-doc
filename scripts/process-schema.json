{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Corezoid Process Schema",
  "description": "JSON Schema for validating Corezoid process structures",
  "type": "object",
  "required": [
    "obj_type",
    "obj_id",
    "parent_id",
    "title",
    "status",
    "params",
    "scheme"
  ],
  "properties": {
    "obj_type": {
      "type": "integer",
      "description": "Object type identifier"
    },
    "obj_id": {
      "type": [
        "integer",
        "string"
      ],
      "description": "Unique identifier for the process"
    },
    "parent_id": {
      "type": [
        "integer",
        "string"
      ],
      "description": "Parent process identifier"
    },
    "title": {
      "type": "string",
      "description": "Process title"
    },
    "description": {
      "type": "string",
      "description": "Process description"
    },
    "status": {
      "type": "string",
      "enum": [
        "active",
        "inactive",
        "paused"
      ],
      "description": "Process status"
    },
    "uuid": {
      "type": "string",
      "description": "Universally unique identifier for the process"
    },
    "params": {
      "type": "array",
      "description": "Process parameters",
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Parameter name"
          },
          "key": {
            "type": "string",
            "description": "Parameter key (alternative to name)"
          },
          "type": {
            "type": "string",
            "enum": [
              "string",
              "number",
              "boolean",
              "array",
              "object"
            ],
            "description": "Parameter data type"
          },
          "descr": {
            "type": "string",
            "description": "Parameter description"
          },
          "description": {
            "type": "string",
            "description": "Parameter description (alternative)"
          },
          "flags": {
            "type": "array",
            "description": "Parameter flags",
            "items": {
              "type": "string",
              "enum": [
                "input",
                "output",
                "required"
              ]
            }
          },
          "regex": {
            "type": "string",
            "description": "Validation regex pattern"
          },
          "regex_error_text": {
            "type": "string",
            "description": "Error message for regex validation failure"
          }
        }
      }
    },
    "ref_mask": {
      "type": "boolean",
      "description": "Reference mask flag"
    },
    "conv_type": {
      "type": "string",
      "enum": [
        "process",
        "state"
      ],
      "description": "Process type"
    },
    "scheme": {
      "type": "object",
      "required": [
        "nodes"
      ],
      "properties": {
        "nodes": {
          "type": "array",
          "description": "Array of nodes in the process",
          "items": {
            "$ref": "#/definitions/node"
          },
          "minItems": 1
        },
        "web_settings": {
          "type": "array",
          "description": "Web interface settings for the process",
          "items": {
            "type": "array"
          }
        }
      }
    }
  },
  "definitions": {
    "process": {
      "type": "object",
      "required": [
        "obj_type",
        "obj_id",
        "parent_id",
        "title",
        "status",
        "params",
        "scheme"
      ],
      "allOf": [
        {
          "if": {
            "properties": {
              "scheme": {
                "properties": {
                  "nodes": {
                    "type": "array",
                    "contains": {
                      "properties": {
                        "condition": {
                          "properties": {
                            "logics": {
                              "type": "array",
                              "contains": {
                                "properties": {
                                  "type": {
                                    "enum": [
                                      "api_rpc_reply"
                                    ]
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "then": {
            "properties": {
              "params": {
                "type": "array",
                "contains": {
                  "properties": {
                    "flags": {
                      "type": "array",
                      "contains": {
                        "enum": [
                          "output"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      ],
      "properties": {
        "obj_type": {
          "type": "integer",
          "description": "Object type identifier"
        },
        "obj_id": {
          "type": [
            "integer",
            "string"
          ],
          "description": "Unique identifier for the process"
        },
        "parent_id": {
          "type": [
            "integer",
            "string"
          ],
          "description": "Parent process identifier"
        },
        "title": {
          "type": "string",
          "description": "Process title"
        },
        "description": {
          "type": "string",
          "description": "Process description"
        },
        "status": {
          "type": "string",
          "enum": [
            "active",
            "inactive",
            "paused"
          ],
          "description": "Process status"
        },
        "uuid": {
          "type": "string",
          "description": "Universally unique identifier for the process"
        },
        "params": {
          "type": "array",
          "description": "Process parameters",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Parameter name"
              },
              "key": {
                "type": "string",
                "description": "Parameter key (alternative to name)"
              },
              "type": {
                "type": "string",
                "enum": [
                  "string",
                  "number",
                  "boolean",
                  "array",
                  "object"
                ],
                "description": "Parameter data type"
              },
              "descr": {
                "type": "string",
                "description": "Parameter description"
              },
              "description": {
                "type": "string",
                "description": "Parameter description (alternative)"
              },
              "flags": {
                "type": "array",
                "description": "Parameter flags",
                "items": {
                  "type": "string",
                  "enum": [
                    "input",
                    "output",
                    "required"
                  ]
                }
              },
              "regex": {
                "type": "string",
                "description": "Validation regex pattern"
              },
              "regex_error_text": {
                "type": "string",
                "description": "Error message for regex validation failure"
              }
            }
          }
        },
        "ref_mask": {
          "type": "boolean",
          "description": "Reference mask flag"
        },
        "conv_type": {
          "type": "string",
          "enum": [
            "process",
            "state"
          ],
          "description": "Process type"
        },
        "scheme": {
          "type": "object",
          "required": [
            "nodes"
          ],
          "properties": {
            "nodes": {
              "type": "array",
              "description": "Array of nodes in the process",
              "items": {
                "$ref": "#/definitions/node"
              },
              "minItems": 1
            },
            "web_settings": {
              "type": "array",
              "description": "Web interface settings for the process",
              "items": {
                "type": "array"
              }
            }
          }
        }
      }
    }
  },
  "definitions": {
    "node": {
      "type": "object",
      "required": [
        "id",
        "obj_type",
        "condition",
        "title",
        "x",
        "y"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the node"
        },
        "obj_type": {
          "type": "integer",
          "enum": [
            0,
            1,
            2,
            3
          ],
          "description": "Node type: 0 = Normal, 1 = Start, 2 = End, 3 = Escalation"
        },
        "condition": {
          "type": "object",
          "required": [
            "logics",
            "semaphors"
          ],
          "properties": {
            "logics": {
              "type": "array",
              "description": "Logic rules for the node",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/logic_go"
                  },
                  {
                    "$ref": "#/definitions/logic_go_if_const"
                  },
                  {
                    "$ref": "#/definitions/logic_api"
                  },
                  {
                    "$ref": "#/definitions/logic_api_code"
                  },
                  {
                    "$ref": "#/definitions/logic_api_copy"
                  },
                  {
                    "$ref": "#/definitions/logic_api_rpc"
                  },
                  {
                    "$ref": "#/definitions/logic_api_rpc_reply"
                  },
                  {
                    "$ref": "#/definitions/logic_api_get_task"
                  },
                  {
                    "$ref": "#/definitions/logic_db_call"
                  },
                  {
                    "$ref": "#/definitions/logic_api_queue"
                  },
                  {
                    "$ref": "#/definitions/logic_set_param"
                  },
                  {
                    "$ref": "#/definitions/logic_api_sum"
                  },
                  {
                    "$ref": "#/definitions/logic_api_callback"
                  },
                  {
                    "$ref": "#/definitions/logic_git_call"
                  },
                  {
                    "$ref": "#/definitions/logic_api_reply"
                  },
                  {
                    "$ref": "#/definitions/logic_api_form"
                  },
                  {
                    "$ref": "#/definitions/logic_api_sender"
                  }
                ]
              }
            },
            "semaphors": {
              "type": "array",
              "description": "Semaphore rules for the node",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/semaphors_time"
                  },
                  {
                    "$ref": "#/definitions/semaphors_count"
                  }
                ]
              }
            }
          }
        },
        "title": {
          "type": "string",
          "description": "Node title"
        },
        "description": {
          "type": "string",
          "description": "Node description"
        },
        "x": {
          "type": "integer",
          "description": "X coordinate for visual positioning"
        },
        "y": {
          "type": "integer",
          "description": "Y coordinate for visual positioning"
        },
        "uuid": {
          "type": "string",
          "description": "Universally unique identifier for the node"
        },
        "options": {
          "type": [
            "object",
            "string"
          ],
          "description": "Additional node options, can be a JSON string or object",
          "properties": {
            "save_task": {
              "type": "boolean",
              "description": "Whether to save the task in this node"
            },
            "error_status": {
              "type": "boolean",
              "description": "Whether this node represents an error state"
            }
          }
        },
        "max_threads": {
          "type": "integer",
          "description": "Maximum number of threads for the node",
          "default": 1
        },
        "extra": {
          "type": [
            "string",
            "object"
          ],
          "description": "Extra node configuration, often stored as a JSON string"
        }
      }
    },
    "logic_go": {
      "type": "object",
      "required": [
        "type",
        "to_node_id"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "go"
          ],
          "description": "Simple routing logic"
        },
        "to_node_id": {
          "type": "string",
          "description": "Target node ID"
        }
      }
    },
    "logic_go_if_const": {
      "type": "object",
      "required": [
        "type",
        "to_node_id",
        "conditions"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "go_if_const"
          ],
          "description": "Conditional routing logic"
        },
        "to_node_id": {
          "type": "string",
          "description": "Target node ID"
        },
        "conditions": {
          "type": "array",
          "description": "Conditions for routing",
          "items": {
            "type": "object",
            "required": ["fun", "const", "param", "cast"],
            "properties": {
              "fun": {
                "type": "string",
                "enum": ["eq", "not_eq", "less", "more", "regexp", "less_or_eq", "more_or_eq"],
                "description": "Comparison function"
              },
              "const": {
                "type": "string",
                "description": "Value to compare against"
              },
              "param": {
                "type": "string",
                "description": "Parameter name to evaluate"
              },
              "cast": {
                "type": "string",
                "enum": ["string", "number", "boolean"],
                "description": "Data type for comparison"
              }
            }
          }
        }
      }
    },
    "logic_api": {
      "type": "object",
      "required": [
        "type",
        "extra",
        "extra_type",
        "max_threads"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "api"
          ],
          "description": "API call logic"
        },
        "is_migrate": {
          "type": "boolean",
          "description": "Migration flag"
        },
        "rfc_format": {
          "type": "boolean",
          "description": "RFC format flag"
        },
        "format": {
          "type": "string",
          "description": "Format of the API request"
        },
        "raw_body": {
          "type": "boolean",
          "description": "Raw body flag"
        },
        "content_type": {
          "type": "string",
          "description": "Content type of the request"
        },
        "content_response_type": {
          "type": "string",
          "description": "Content type of the response"
        },
        "method": {
          "type": "string",
          "description": "HTTP method"
        },
        "url": {
          "type": "string",
          "description": "API endpoint URL"
        },
        "extra": {
          "type": [
            "object",
            "array"
          ],
          "description": "Extra parameters for the API call"
        },
        "extra_type": {
          "type": [
            "object",
            "array"
          ],
          "description": "Types of extra parameters"
        },
        "extra_headers": {
          "type": [
            "object",
            "array"
          ],
          "description": "Extra HTTP headers"
        },
        "api_secret_outer": {
          "type": "string",
          "description": "API secret for authentication"
        },
        "cert_pem": {
          "type": "string",
          "description": "Certificate in PEM format"
        },
        "max_threads": {
          "type": "integer",
          "description": "Maximum number of threads",
          "default": 5
        },
        "send_sys": {
          "type": "boolean",
          "description": "Send system parameters flag"
        },
        "debug_info": {
          "type": "boolean",
          "description": "Debug information flag"
        },
        "err_node_id": {
          "type": "string",
          "description": "Error node ID"
        },
        "customize_response": {
          "type": "boolean",
          "description": "Customize response flag"
        },
        "response": {
          "type": [
            "object",
            "array"
          ],
          "description": "Response configuration"
        },
        "response_type": {
          "type": [
            "object",
            "array"
          ],
          "description": "Response type configuration"
        },
        "version": {
          "type": "integer",
          "description": "API version"
        }
      }
    },
    "logic_api_code": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "api_code"
          ],
          "description": "Code execution logic"
        },
        "lang": {
          "type": "string",
          "enum": [
            "erl",
            "js"
          ],
          "description": "Programming language"
        },
        "src": {
          "type": "string",
          "description": "Source code"
        },
        "err_node_id": {
          "type": "string",
          "description": "Error node ID"
        }
      }
    },
    "logic_api_copy": {
      "type": "object",
      "required": [
        "type",
        "data",
        "data_type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "api_copy"
          ],
          "description": "Copy task logic"
        },
        "user_id": {
          "type": [
            "string",
            "integer"
          ],
          "description": "User ID"
        },
        "project_id": {
          "type": [
            "string",
            "integer"
          ],
          "description": "Project ID"
        },
        "stage_id": {
          "type": [
            "string",
            "integer"
          ],
          "description": "Stage ID"
        },
        "conv_id": {
          "type": [
            "string",
            "integer"
          ],
          "description": "Process ID"
        },
        "ref": {
          "type": "string",
          "description": "Reference"
        },
        "mode": {
          "type": "string",
          "description": "Mode"
        },
        "is_sync": {
          "type": "boolean",
          "description": "Synchronous flag"
        },
        "group": {
          "type": "string",
          "description": "Group"
        },
        "data": {
          "type": [
            "object",
            "array"
          ],
          "description": "Data to copy"
        },
        "data_type": {
          "type": [
            "object",
            "array"
          ],
          "description": "Data type"
        },
        "err_node_id": {
          "type": "string",
          "description": "Error node ID"
        }
      }
    },
    "logic_api_rpc": {
      "type": "object",
      "required": [
        "type",
        "extra",
        "extra_type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "api_rpc"
          ],
          "description": "RPC call logic"
        },
        "user_id": {
          "type": [
            "string",
            "integer"
          ],
          "description": "User ID"
        },
        "project_id": {
          "type": [
            "string",
            "integer"
          ],
          "description": "Project ID"
        },
        "stage_id": {
          "type": [
            "string",
            "integer"
          ],
          "description": "Stage ID"
        },
        "conv_id": {
          "type": [
            "string",
            "integer"
          ],
          "description": "Process ID"
        },
        "group": {
          "type": "string",
          "description": "Group"
        },
        "err_node_id": {
          "type": "string",
          "description": "Error node ID"
        },
        "extra": {
          "type": [
            "object",
            "array"
          ],
          "description": "Extra parameters"
        },
        "extra_type": {
          "type": [
            "object",
            "array"
          ],
          "description": "Extra parameter types"
        }
      }
    },
    "logic_api_rpc_reply": {
      "type": "object",
      "required": [
        "type",
        "res_data",
        "res_data_type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "api_rpc_reply"
          ],
          "description": "RPC reply logic"
        },
        "mode": {
          "type": "string",
          "description": "Mode"
        },
        "res_data": {
          "type": [
            "object",
            "array"
          ],
          "description": "Response data"
        },
        "res_data_type": {
          "type": [
            "object",
            "array"
          ],
          "description": "Response data type"
        },
        "throw_exception": {
          "type": "boolean",
          "description": "Throw exception flag"
        },
        "exception_reason": {
          "type": "string",
          "description": "Exception reason"
        }
      }
    },
    "logic_api_reply": {
      "type": "object",
      "required": [
        "type",
        "extra",
        "extra_type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "api_reply"
          ],
          "description": "Reply logic"
        },
        "extra": {
          "type": [
            "object",
            "array"
          ],
          "description": "Reply data"
        },
        "extra_type": {
          "type": [
            "object",
            "array"
          ],
          "description": "Reply data type"
        },
        "err_node_id": {
          "type": "string",
          "description": "Error node ID"
        }
      }
    },
    "logic_api_form": {
      "type": "object",
      "required": [
        "type",
        "extra",
        "extra_type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "api_form"
          ],
          "description": "Form logic (DEPRECATED)"
        },
        "extra": {
          "type": [
            "object",
            "array"
          ],
          "description": "Form data"
        },
        "extra_type": {
          "type": [
            "object",
            "array"
          ],
          "description": "Form data type"
        },
        "err_node_id": {
          "type": "string",
          "description": "Error node ID"
        }
      }
    },
    "logic_api_sender": {
      "type": "object",
      "required": [
        "type",
        "extra",
        "extra_type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "api_sender"
          ],
          "description": "Sender logic (DEPRECATED)"
        },
        "extra": {
          "type": [
            "object",
            "array"
          ],
          "description": "Sender data"
        },
        "extra_type": {
          "type": [
            "object",
            "array"
          ],
          "description": "Sender data type"
        },
        "err_node_id": {
          "type": "string",
          "description": "Error node ID"
        }
      }
    },
    "logic_api_get_task": {
      "type": "object",
      "required": [
        "type",
        "extra",
        "extra_type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "api_get_task"
          ],
          "description": "Get task logic"
        },
        "user_id": {
          "type": [
            "string",
            "integer"
          ],
          "description": "User ID"
        },
        "conv_id": {
          "type": [
            "string",
            "integer"
          ],
          "description": "Process ID"
        },
        "node_id": {
          "type": "string",
          "description": "Node ID"
        },
        "order_by": {
          "type": "string",
          "description": "Order by"
        },
        "err_node_id": {
          "type": "string",
          "description": "Error node ID"
        }
      }
    },
    "logic_db_call": {
      "type": "object",
      "required": [
        "type",
        "extra",
        "extra_type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "db_call"
          ],
          "description": "Database call logic"
        },
        "instance_id": {
          "type": [
            "string",
            "integer"
          ],
          "description": "Database instance ID"
        },
        "query": {
          "type": "string",
          "description": "SQL query"
        },
        "err_node_id": {
          "type": "string",
          "description": "Error node ID"
        },
        "instance_name": {
          "type": "string",
          "description": "Database instance name"
        },
        "folder_id": {
          "type": [
            "string",
            "integer"
          ],
          "description": "Folder ID"
        }
      }
    },
    "logic_api_queue": {
      "type": "object",
      "required": [
        "type",
        "extra",
        "extra_type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "api_queue"
          ],
          "description": "Queue logic"
        },
        "data": {
          "type": [
            "object",
            "array"
          ],
          "description": "Queue data"
        },
        "data_type": {
          "type": [
            "object",
            "array"
          ],
          "description": "Queue data type"
        }
      }
    },
    "logic_set_param": {
      "type": "object",
      "required": [
        "type",
        "extra",
        "extra_type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "set_param"
          ],
          "description": "Set parameter logic"
        },
        "extra": {
          "type": [
            "object",
            "array"
          ],
          "description": "Parameters to set"
        },
        "extra_type": {
          "type": [
            "object",
            "array"
          ],
          "description": "Parameter types"
        },
        "err_node_id": {
          "type": "string",
          "description": "Error node ID"
        }
      }
    },
    "logic_api_sum": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "api_sum"
          ],
          "description": "Sum logic"
        },
        "extra": {
          "type": [
            "object",
            "array"
          ],
          "description": "Sum configuration"
        },
        "err_node_id": {
          "type": "string",
          "description": "Error node ID"
        }
      }
    },
    "logic_api_callback": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "api_callback"
          ],
          "description": "Callback logic"
        },
        "is_sync": {
          "type": "boolean",
          "description": "Synchronous flag"
        },
        "obj_id_path": {
          "type": "string",
          "description": "Object ID path"
        }
      }
    },
    "logic_git_call": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "git_call"
          ],
          "description": "Git call logic"
        },
        "version": {
          "type": [
            "string",
            "integer"
          ],
          "description": "Version"
        },
        "lang": {
          "type": "string",
          "description": "Programming language"
        },
        "code": {
          "type": "string",
          "description": "Code"
        },
        "commit": {
          "type": "string",
          "description": "Commit hash"
        },
        "script": {
          "type": "string",
          "description": "Script name"
        },
        "repo": {
          "type": "string",
          "description": "Repository URL"
        },
        "path": {
          "type": "string",
          "description": "Path to script"
        },
        "src": {
          "type": "string",
          "description": "Source code"
        },
        "log": {
          "type": "boolean",
          "description": "Log flag"
        },
        "err_node_id": {
          "type": "string",
          "description": "Error node ID"
        }
      }
    },
    "semaphors_time": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "time"
          ],
          "description": "Time semaphore"
        },
        "value": {
          "type": [
            "string",
            "integer"
          ],
          "description": "Time value"
        },
        "dimension": {
          "type": "string",
          "description": "Time dimension"
        },
        "to_node_id": {
          "type": "string",
          "description": "Target node ID"
        }
      }
    },
    "semaphors_count": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "count"
          ],
          "description": "Count semaphore"
        },
        "value": {
          "type": [
            "string",
            "integer"
          ],
          "description": "Count value"
        },
        "esc_node_id": {
          "type": "string",
          "description": "Escalation node ID"
        }
      }
    }
  },
  "additionalProperties": true
}
